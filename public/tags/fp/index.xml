<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fp on Lewis Coleman</title>
    <link>http://www.lcoleman.me/tags/fp/</link>
    <description>Recent content in Fp on Lewis Coleman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.lcoleman.me/tags/fp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day 56 - Lists</title>
      <link>http://www.lcoleman.me/apprenticeship/day_56/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lcoleman.me/apprenticeship/day_56/</guid>
      <description>[Lists] Okay, I did the list chapter from the Haskell book before Innodays, however I never did a blog post on it. And in this chapter there was some crucial information on the idiomatic ways Haskell deals with lists, so I am reviewing what I learnt and writing a post about it&amp;hellip;
The cons (:) operator One of these idiomatic Haskellism is the cons operator :. Haskell has 2 ways of defining the List datatype:</description>
    </item>
    
    <item>
      <title>Day 45 - Exercism</title>
      <link>http://www.lcoleman.me/apprenticeship/day_45/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lcoleman.me/apprenticeship/day_45/</guid>
      <description>A break from the book Today I&amp;rsquo;ve been completing some more autonomous and less guided exercises in Exercism. I find these exercises more challenging as it&amp;rsquo;s not focused around the last chapter I read, and forces me to apply everything that I&amp;rsquo;ve learnt and work out the best way.
An example is the Acronym challenge, which requires you to create a function that creates an acronym out of any String argument.</description>
    </item>
    
    <item>
      <title>Day 44</title>
      <link>http://www.lcoleman.me/apprenticeship/day_44/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lcoleman.me/apprenticeship/day_44/</guid>
      <description>Recursion Is the use of repeated function application, so the self-calling nature of a function. Recursive functions requires a a termination step to avoid stack overflow. The usual layout of this is to make a recursive bottom and the termination steps higher up the code order.
Today I saw myself naturally implementing a TDD approach (very loosely because I&amp;rsquo;m not even implementing test suites into Haskell rn) to creating my recursion model.</description>
    </item>
    
    <item>
      <title>Day 43</title>
      <link>http://www.lcoleman.me/apprenticeship/day_43/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.lcoleman.me/apprenticeship/day_43/</guid>
      <description>More Functional Patterns Guards A way of evaluating many truth statements separately. This is an alternative way of using case statements, although this method uses otherwise which is ideal for handling bottoms.
Bottoms - a non-value used to denote that the program cannot return a value or result.
avgGrade :: (Fractional a, Ord a) =&amp;gt; a -&amp;gt; Char avgGrade x | y&amp;gt;=0.9 =&#39;A&#39; | y&amp;gt;=0.8 =&#39;B&#39; | y&amp;gt;=0.7 =&#39;C&#39; | y &amp;gt;= 0.</description>
    </item>
    
  </channel>
</rss>